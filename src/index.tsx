// ===============  exam #19  q1 ================

// import React from 'react'
// import ReactDOM from 'react-dom/client';
// import {BrowserRouter, Route, Routes} from 'react-router-dom';
//
// export const Main = () => {
//     return (
//         <>
//             <h2>‚úÖ –°–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤</h2>
//             <h2>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h2>
//         </>
//     )
// }
//
// // App
// export const App = () => {
//     return (
//         <BrowserRouter><Routes><Route path={'/'} element={<Main/>}/></Routes></BrowserRouter> // ==========  //
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<App/>)
//
// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –ë–µ–ª—ã–π —ç–∫—Ä–∞–Ω... –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.
// // –ù–∞–π–¥–∏—Ç–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–æ—Å—å 2 –∑–∞–≥–æ–ª–æ–≤–∫–∞.
// // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
//
// // üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: <Route path={'/'} component={<Main/>}/>


// ===============  exam #19  q2 ================

// import React from 'react'
// import ReactDOM from 'react-dom/client';
// import { BrowserRouter, Route, Routes } from 'react-router-dom'
//
// export const Main = () => {
//     return (
//         <>
//             <h2>‚úÖ –°–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤</h2>
//             <h2>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h2>
//         </>
//     )
// }
//
// // App
// export const App = () => {
//
//     return (
//         <Routes>
//            <Route path={'/'} element={<Main/>}/>  //  =============     // ======= ////
//         </Routes>
//     )
// }
//
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<BrowserRouter><App/></BrowserRouter>)
//
// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø–∞–¥–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π...
// // –ù–∞–π–¥–∏—Ç–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–æ—Å—å 2 –∑–∞–≥–æ–ª–æ–≤–∫–∞.
// // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
//
// // üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: type InitStateType = typeof initState


// ===============  exam #19  q3 ================

// import React from 'react'
// import ReactDOM from 'react-dom/client';
// import { BrowserRouter, Navigate, Route, Routes } from 'react-router-dom'
//
//
// export const PageNotFound = () => {
//     return <h2>‚õî 404. Page not found ‚õî</h2>
// }
//
// export const Profile = () => {
//     return <h2>üòé –ü—Ä–æ—Ñ–∏–ª—å</h2>
// }
//
//
// export const Main = () => {
//     return (
//         <>
//             <h2>‚úÖ –°–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤</h2>
//             <h2>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h2>
//         </>
//     )
// }
//
// // App
// export const App = () => {
//
//     return (
//         <Routes>
//             <Route path={'profile'} element={<Profile/>}/>
//             {/*/!* ‚ùó‚ùó‚ùó <Route path = {'*'} element = {<Navigate to = '/profile'/>}/> ‚ùó‚ùó‚ùó  *!/  // ========== //*/}
//         </Routes>
//     )
// }
//
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<BrowserRouter><App/></BrowserRouter>)
//
// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –í–º–µ—Å—Ç–æ –•–•–• –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–æ—É—Ç —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ —á—Ç–æ–±—ã –±—É–¥–µ—Ç –≤ —É—Ä–ª–µ (login –∏–ª–∏ home –∏–ª–∏...)
// // –≤–∞—Å –≤—Å–µ–≥–¥–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–ª–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø—Ä–∏ –≤ —ç—Ç–æ –≤ —É—Ä–ª–µ –ø–æ –∏—Ç–æ–≥—É
// // –±—ã–ª –∞–¥—Ä–µ—Å /profile
//
// // üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: <Route path={'/'} element={'to profile page'}/>


// ===============  exam #19  q4 ================

// import { useFormik } from 'formik';
// import React from 'react'
// import ReactDOM from 'react-dom/client';
// import { BrowserRouter, Route, Routes } from 'react-router-dom'
//
// // Main
// export const Login = () => {
//
//     const formik = useFormik({
//         initialValues: {
//             email: '',
//             password: '',
//         },
//         onSubmit: values => {
//             alert(JSON.stringify(values, null, 2));
//         },
//     });
//
//
//     return (
//         <form onSubmit={formik.handleSubmit}> /*//  ============ // ======== //*/
//             <div>
//                 <input
//                     name="email"
//                     onChange={formik.handleChange}
//                     value={formik.values.email}
//                     type="text"
//                     placeholder={'–í–≤–µ–¥–∏—Ç–µ email'}
//                 />
//             </div>
//             <div>
//                 <input
//                     name="password"
//                     onChange={formik.handleChange}
//                     value={formik.values.password}
//                     type="password"
//                     placeholder={'–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'}
//                 />
//             </div>
//             <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
//         </form>
//     );
// }
//
// // App
// export const App = () => {
//     return (
//         <Routes>
//             <Route path={''} element={<Login/>}/>
//         </Routes>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<BrowserRouter><App/></BrowserRouter>)
//
// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –ü—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –∏ –∏—Ö –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—ã –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å alert c
// // –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –Ω–æ –∏–∑-–∑–∞ –¥–æ–ø—É—â–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
// // –ù–∞–π–¥–∏—Ç–µ –æ—à–∏–±–∫—É –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// // ‚ùó–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–∫–∞–∑–∞–ª—Å—è alert —Ñ–æ—Ä–º–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
//
// // üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: alert(JSON.stringify(values))




// ===============  exam #19  q5 ================

// import { useFormik } from 'formik';
// import React from 'react'
// import ReactDOM from 'react-dom/client';
// import { BrowserRouter, Route, Routes } from 'react-router-dom'
//
//
// // Main
// export const Login = () => {
//
//     const formik = useFormik({
//         initialValues: {
//             firstName: '',
//             lastName: '',
//             email: '',
//             password: '',
//             phone: '',
//         },
//         onSubmit: values => {
//             alert(JSON.stringify(values, null, 2));
//         },
//     });
//
//     return (
//         <form onSubmit={formik.handleSubmit}>
//             <div>
//                 <input
//                     name="firstName"
//                     onChange={formik.handleChange}
//                     value={formik.values.firstName}
//                     placeholder={'–í–≤–µ–¥–∏—Ç–µ –∏–º—è'}
//                 />
//             </div>
//             <div>
//                 <input
//                     name="lastName"
//                     onChange={formik.handleChange}
//                     value={formik.values.lastName}
//                     placeholder={'–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é'}
//                 />
//             </div>
//             <div>
//                 <input
//                     name="email"
//                     onChange={formik.handleChange}
//                     value={formik.values.email}
//                     placeholder={'–í–≤–µ–¥–∏—Ç–µ email'}
//                 />
//             </div>
//             <div>
//                 <input
//                     name="password"
//                     onChange={formik.handleChange}
//                     value={formik.values.password}
//                     placeholder={'–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'}
//                     type={'password'}
//                 />
//             </div>
//             <div>
//                 <input
//                     name="phone"      // =================== //
//                     onChange={formik.handleChange}
//                     value={formik.values.phone}
//                     placeholder={'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω'}
//                 />
//             </div>
//             <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
//         </form>
//     );
// }
//
// // App
// export const App = () => {
//     return (
//         <Routes>
//             <Route path={''} element={<Login/>}/>
//         </Routes>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<BrowserRouter><App/></BrowserRouter>)
//
// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
// // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∂–∞–ª—É—é—Ç—Å—è –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ "–¢–µ–ª–µ—Ñ–æ–Ω–∞"
// // –ù–∞–π–¥–∏—Ç–µ –≤ –∫–æ–¥–µ –æ—à–∏–±–∫—É. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
//
// // üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: <form onSubmit={formik.handleSubmit}>




// ===============  exam #19  q6 ================

// import { useFormik } from 'formik';
// import React from 'react'
// import ReactDOM from 'react-dom/client';
// import { BrowserRouter, Route, Routes } from 'react-router-dom'
//
//
// // Types
// type LoginFieldsType = {
//     firstName?: string
// }
//
// // Main
// export const Login = () => {
//
//     const formik = useFormik({
//         initialValues: {
//             firstName: '',
//         },
//         validate: (values) => {
//             const errors: LoginFieldsType = {};
//             if (values.firstName.length < 5) errors.firstName = 'Must be 5 characters or more'  // ========  //
//
//             return errors
//         },
//         onSubmit: values => {
//             alert(JSON.stringify(values, null, 2));
//         }
//     });
//
//     return (
//         <form onSubmit={formik.handleSubmit}>
//             <div>
//                 <input placeholder={'–í–≤–µ–¥–∏—Ç–µ –∏–º—è'} {...formik.getFieldProps('firstName')}/>
//             </div>
//             <button type="submit" disabled={!(formik.isValid && formik.dirty)}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
//         </form>
//     );
// }
//
// // App
// export const App = () => {
//     return (
//         <Routes>
//             <Route path={''} element={<Login/>}/>
//         </Routes>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<BrowserRouter><App/></BrowserRouter>)
//
// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –≤ –ø–æ–ª–µ firstName —Å–∏–º–≤–æ–ª—ã. –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∫–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" —Ä–∞–∑–¥–∏–∑–∞–±–ª–∏—Ç—Å—è.
// // –ó–∞–¥–∞—á–∞: –∫–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" –¥–æ–ª–∂–Ω–∞ —Ä–∞–∑–¥–∏–∑–∞–±–ª–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω–∞ –∏–º–µ–Ω–∏ –±–æ–ª—å—à–µ, –ª–∏–±–æ —Ä–∞–≤–Ω–∞ 5 —Å–∏–º–≤–æ–ª–∞–º.
// // –¢.–µ. –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç—É –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—è firstName.
// // ‚ùó –í –∫–∞—á–µ—Å—Ç–≤–µ —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ 'Must be 5 characters or more'
// // ‚ùó –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –≤—ã–≤–æ–¥–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–ª—è —Å–µ–±—è –ø–æ–∏–≥—Ä–∞—Ç—å—Å—è).
//
// // –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ —Å —É—Å–ª–æ–≤–∏–µ–º.
// // üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: return errors.firstName = 'Must be 5 characters or more'
// // ‚ùó –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä yup) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ




// ===============  exam #19  q7 ================

// import { useFormik } from 'formik';
// import React from 'react'
// import ReactDOM from 'react-dom/client';
// import { BrowserRouter, Route, Routes } from 'react-router-dom'
// import {Simulate} from "react-dom/test-utils";
// import error = Simulate.error;
//
//
// // Types
// type LoginFieldsType = {
//     firstName: string
//     email: string
// }
//
// // Main
// export const Login = () => {
//
//     const formik = useFormik({
//         initialValues: {
//             firstName: '',
//             email: '',
//         },
//         validate: (values) => {
//             const errors: Partial<LoginFieldsType> = {};
//
//             if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i.test(values.email)) {
//                 errors.email = 'Invalid email address';
//             }
//             return errors
//         },
//         onSubmit: values => {
//             alert(JSON.stringify(values, null, 2));
//         }
//     });
//
//     // –§—É–Ω–∫—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–µ–±—à—Ç–æ—Ä–º –Ω–µ —Ä—É–≥–∞–ª—Å—è –Ω–∞ true –≤ JSX
//     const getTrue = () => {
//         return true
//     }
//
//     return (
//         <form onSubmit={formik.handleSubmit}>
//             <div>
//                 <input placeholder={'–í–≤–µ–¥–∏—Ç–µ –∏–º—è'} {...formik.getFieldProps('firstName')}/>
//             </div>
//             <div>
//                 <input placeholder={'–í–≤–µ–¥–∏—Ç–µ email'}{...formik.getFieldProps('email')}/>
//                 {formik.touched.email && formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}  {/*// ============= //*/}
//             </div>
//             <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
//         </form>
//     );
// }
//
// // App
// export const App = () => {
//     return (
//         <Routes>
//             <Route path={''} element={<Login/>}/>
//         </Routes>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<BrowserRouter><App/></BrowserRouter>)
//
// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –ó–∞–≥—Ä—É–∑–∏–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ –æ—à–∏–±–∫—É –ø–æ–¥ –ø–æ–ª–µ–º email, –Ω–æ –≤—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª–∏.
// // –ò—Å–ø—Ä–∞–≤—å—Ç–µ 46 —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ —Ç–∞–∫, —á—Ç–æ–±—ã:
// // 1) –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ email –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
// // 2) –í–º–µ—Å—Ç–æ ERROR –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–æ–ø–∏—Å–∞–Ω–Ω—ã–π –≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫ —ç—Ç–æ–º—É –ø–æ–ª—é.
// // 3) –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ –º—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ —Å –ø–æ–ª–µ–º.
// // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
//
// // üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {true && <div style={{color: 'red'}}>error.email</div>}



// ===============  exam #19  q8 ================


import { useFormik } from 'formik';
import React from 'react'
import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';
import ReactDOM from 'react-dom/client';
import {BrowserRouter, Navigate, Route, Routes, useNavigate} from 'react-router-dom'
import axios from 'axios';
import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux';
import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk';


// Types
type LoginFieldsType = {
    email: string
    password: string
}

// API
const instance = axios.create({baseURL: 'https://exams-frontend.kimitsu.it-incubator.ru/api/'})

const api = {
    login(data: LoginFieldsType) {
        return instance.post('auth/login', data)
    },
}


// Reducer
const initState = {
    isLoading: false,
    error: null as string | null,
    isLoggedIn: false,
}

type InitStateType = typeof initState

const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
    switch (action.type) {
        case 'APP/SET-IS-LOGGED-IN':
            return {...state, isLoggedIn: action.isLoggedIn}
        case 'APP/IS-LOADING':
            return {...state, isLoading: action.isLoading}
        case 'APP/SET-ERROR':
            return {...state, error: action.error}
        default:
            return state
    }
}

// Actions
const setIsLoggedIn = (isLoggedIn: boolean) => ({type: 'APP/SET-IS-LOGGED-IN', isLoggedIn} as const)
const setLoadingAC = (isLoading: boolean) => ({type: 'APP/IS-LOADING', isLoading} as const)
const setError = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)
type ActionsType =
    | ReturnType<typeof setIsLoggedIn>
    | ReturnType<typeof setLoadingAC>
    | ReturnType<typeof setError>


// Thunk
const loginTC = (values: LoginFieldsType): AppThunk => (dispatch) => {
    dispatch(setLoadingAC(true))
    api.login(values)
        .then((res) => {
            dispatch(setIsLoggedIn(true))
            alert('–í—ã –∑–∞–ª–æ–≥–∏–Ω–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ')
        })
        .catch((e) => {
            dispatch(setError(e.response.data.errors))
        })
        .finally(() => {
            dispatch(setLoadingAC(false))
            setTimeout(() => {
                dispatch(setError(null))
            }, 3000)
        })
}

// Store
const rootReducer = combineReducers({
    app: appReducer,
})

const store = createStore(rootReducer, applyMiddleware(thunk))
type RootState = ReturnType<typeof store.getState>
type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
const useAppDispatch = () => useDispatch<AppDispatch>()
const useAppSelector: TypedUseSelectorHook<RootState> = useSelector


// Loader
export const Loader = () => {
    return <h1>Loading ...</h1>
}

// Profile
export const Profile = () => {
    return <h2>üòé Profile</h2>
}

// Login
export const Login = () => {

    const dispatch = useAppDispatch()
    const navigate = useNavigate()

    const error = useAppSelector(state => state.app.error)
    const isLoading = useAppSelector(state => state.app.isLoading)
    const isLoggedIn = useAppSelector(state => state.app.isLoggedIn)

    const formik = useFormik({
        initialValues: {
            email: 'darrell@gmail.com',
            password: '123',
        },
        onSubmit: values => {
            dispatch(loginTC(values))
        }
    });

    if(isLoggedIn) {
        // return navigate('profile')
        console.log('redirect to profile')
    }

    return (
        <div>
            {!!error && <h2 style={{color: 'red'}}>{error}</h2>}
            {isLoading && <Loader/>}
            <form onSubmit={formik.handleSubmit}>
                <div>
                    <input placeholder={'–í–≤–µ–¥–∏—Ç–µ email'}
                           {...formik.getFieldProps('email')}/>
                </div>
                <div>
                    <input type={'password'}
                           placeholder={'–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'}
                           {...formik.getFieldProps('password')}/>
                </div>
                <button type="submit">–ó–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è</button>
            </form>
        </div>
    );
}

// App
export const App = () => {

    return (
        <Routes>
            <Route path={''} element={<Login/>}/>
            <Route path={'profile'} element={<Profile/>}/>
        </Routes>
    )
}

const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
root.render(<Provider store={store}><BrowserRouter><App/></BrowserRouter></Provider>)
// dispatch(setIsLoggedIn(true))


// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// ‚ùó Email –∏ password –º–µ–Ω—è—Ç—å –Ω–µ –Ω–∞–¥–æ. –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å.
// –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è" –∏ –≤—ã —É–≤–∏–¥–µ–ª–∏ alert —Å —É—Å–ø–µ—à–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
// –ó–∞–¥–∞—á–∞: –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ª–æ–≥–∏–Ω–∏–∑–∞—Ü–∏–∏, —Ä–µ–¥–∏—Ä–µ–∫—Ç–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Profile.

// –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:  console.log('If login => redirect to profile')
